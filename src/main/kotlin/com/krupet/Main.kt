/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.krupet

class Main

/**
 * Suppose we have array Array(x1,...,xN)
 * Where each x is either an Int or an array of exactly the same structure
 * Could you write an iterator for this kind of arrays which will return integers in order their occurrence.
 *
 *
 * Fixtures:
 *
 *     final Object[] fixture1 = new Object[]{1, new Object[]{2, 3}, 4};
 *     final Integer[] expected1 = new Integer[]{1, 2, 3, 4};
 *
 *     final Object[] fixture2 = new Object[]{1, new Object[]{2, 3}, 4, new Object[]{5, new Object[]{6, new Object[]{7, 8}}, 9}, new Object[]{10}};
 *     final Integer[] expected2 = new Integer[]{1, 2, 3, 4, 5 , 6, 7, 8, 9, 10};
 */
//$ mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes \
//-DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4
//
//set build.plugins.plugin.configuration.source and build.plugins.plugin.configuration.target to 1.8


fun main() {
    val fixture =
        arrayOf<Any>(1, arrayOf(2, 3), 4, arrayOf<Any>(5, arrayOf<Any>(6, arrayOf<Any>(7, 8)), 9), arrayOf<Any>(10))

//    final       new Object[]{1, new Object[]{2, 3}, 4, new Object[]{5, new Object[]{6, new Object[]{7, 8}}, 9}, new Object[]{10}};
    IteratorTest(fixture)
        .forEach {
            println(it)
        }
}

class IteratorTest(val value: Array<Any>) : Iterator<Int> {
    private val iterator: Iterator<Int> = getSeq(value).iterator()

    private fun getSeq(value: Array<Any>): Sequence<Int> {
        return value.asSequence()
            .flatMap {
                when (it) {
                    is Int -> sequenceOf(it)
                    is Array<*> -> getSeq(it as Array<Any>)
                    else -> throw IllegalStateException()
                }
            }
    }

    override fun hasNext(): Boolean {
        return iterator.hasNext()
    }

    override fun next(): Int {
        return iterator.next()
    }

}
